//Insert a node at the middle of a Single LL
public class Insert {  
    class Node{  
        int data;  
        Node next;  
  
        public Node(int data) {  
            this.data = data;  
            this.next = null;  
        }  
    }  
  
    public int size;  
    public Node head = null;  
    public Node tail = null;  
  
    public void addNode(int data) {       //adds a new node
        Node newNode = new Node(data);  
  
        if(head == null) {  
            head = newNode;  
            tail = newNode;  
        }  
        else {  
            tail.next = newNode;  
            tail = newNode;  
        }  
        size++;  
    }  
  
    public void add(int data){              //adds the node in the middle
        Node newNode = new Node(data);  
  
        if(head == null) {  
            head = newNode;  
            tail = newNode;  
        }  
        else {  
            Node temp, current;  
            int count = (size % 2 == 0) ? (size/2) : ((size+1)/2);  
            temp = head;  
            current = null;  
  
            for(int i = 0; i < count; i++) {        //loop till the middle of the list
                current = temp;  
                temp = temp.next;  
            }  
  
            current.next = newNode;  
            newNode.next = temp;  
        }  
        size++;  
    }  
  
    public void display() {  
        Node current = head;  
        if(head == null) {  
            System.out.println("List is empty");  
            return;  
        }  
  
        while(current != null) {  
            System.out.print(current.data + " ");  
            current = current.next;  
        }  
        System.out.println();  
    }  
  
    public static void main(String[] args) {  
  
        Insert sList = new Insert();  
          sList.addNode(1);  
        sList.addNode(2);  
  
        System.out.println("Original : ");  
        sList.display(); 
        sList.add(3);                  //inserts the node in the middle
        System.out.println( "Updated : ");  
        sList.display();  
        sList.add(4);  
        System.out.println("Updated : ");  
        sList.display();  
    }  
}  




//Insertion a node at the beginning of a Circular LL
public class Insert {  
        public class Node{  
            int data;  
            Node next;  
            public Node(int data) {  
                this.data = data;  
            }  
        } 
        public Node head = null;  
        public Node tail = null;  
        
        public void add(int data){      // adds new node at the end 
            Node newNode = new Node(data);  
            if(head == null) { 
                head = newNode;  
                tail = newNode;  
                newNode.next = head;  
            }  
            else {  
                Node temp = head;
                newNode.next = temp;
                head = newNode; 
                tail.next = head;  
            }  
        }  
  
        public void display() {  
            Node current = head;  
            if(head == null) {  
                System.out.println("Empty");  
            }  
            else {  
                System.out.println("Adding nodes at the beginning of the list: ");  
                 do{    
                    System.out.print(" "+ current.data);  
                    current = current.next;  
                }while(current != head);  
                System.out.println();  
            }  
        }  
  
        public static void main(String[] args) {  
            Insert cl = new Insert();  
  
            cl.add(1);      // adding numbers to the list
            cl.display();   
            cl.add(2);  
            cl.display();  
            cl.add(3);  
            cl.display();   
            cl.add(4);  
            cl.display();  
        }  
}  
